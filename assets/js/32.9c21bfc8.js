(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{303:function(a,t,s){"use strict";s.r(t);var e=s(0),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{pre:!0},[s("h1",{pre:!0,attrs:{id:"eloquent-mutators"}},[s("a",{pre:!0,attrs:{class:"header-anchor",href:"#eloquent-mutators"}},[a._v("#")]),a._v(" Eloquent: Mutators")]),a._v(" "),s("ul",[s("li",[s("a",{pre:!0,attrs:{href:"#introduction"}},[a._v("Introducción")])]),a._v(" "),s("li",[s("a",{pre:!0,attrs:{href:"#accessors-and-mutators"}},[a._v("Accesadores y mutadores")]),a._v(" "),s("ul",[s("li",[s("a",{pre:!0,attrs:{href:"#defining-an-accessor"}},[a._v("Definiendo un accesador")])]),a._v(" "),s("li",[s("a",{pre:!0,attrs:{href:"#defining-a-mutator"}},[a._v("Definiendo un mutador")])])])]),a._v(" "),s("li",[s("a",{pre:!0,attrs:{href:"#date-mutators"}},[a._v("Mutadores de fecha")])]),a._v(" "),s("li",[s("a",{pre:!0,attrs:{href:"#attribute-casting"}},[a._v("Conversión de atributos")]),a._v(" "),s("ul",[s("li",[s("a",{pre:!0,attrs:{href:"#array-and-json-casting"}},[a._v("Conversión de arreglos y JSON")])]),a._v(" "),s("li",[s("a",{pre:!0,attrs:{href:"#date-casting"}},[a._v("Conversión de fechas")])])])])]),a._v(" "),s("p",[s("a",{pre:!0,attrs:{name:"introduction"}})]),a._v(" "),s("h2",{pre:!0,attrs:{id:"introduccion"}},[s("a",{pre:!0,attrs:{class:"header-anchor",href:"#introduccion"}},[a._v("#")]),a._v(" Introducción")]),a._v(" "),s("p",[a._v("Los accesadores y mutadores permiten que des formato a los valores de atributos de Eloquent cuando los obtienes o estableces en las instancias de modelo. Por ejemplo, puede que te guste usar el "),s("a",{pre:!0,attrs:{href:"/docs/%7B%7Bversion%7D%7D/encryption"}},[a._v("encriptador de Laravel")]),a._v(" para cifrar un valor mientras es almacenado en la base de datos y después descifrar automáticamente el atributo cuando accedes a él en un modelo de Eloquent.")]),a._v(" "),s("p",[a._v("Además de los accesadores y los mutadores personalizados, Eloquent también puede convertir automáticamente campos de fecha a instancias "),s("a",{pre:!0,attrs:{href:"https://github.com/briannesbitt/Carbon",target:"_blank",rel:"noopener noreferrer"}},[a._v("Carbon"),s("OutboundLink",{pre:!0})],1),a._v(" o incluso "),s("a",{pre:!0,attrs:{href:"#attribute-casting"}},[a._v("convertir campos de texto a JSON")]),a._v(".")]),a._v(" "),s("p",[s("a",{pre:!0,attrs:{name:"accessors-and-mutators"}})]),a._v(" "),s("h2",{pre:!0,attrs:{id:"accesadores-y-mutadores"}},[s("a",{pre:!0,attrs:{class:"header-anchor",href:"#accesadores-y-mutadores"}},[a._v("#")]),a._v(" Accesadores y mutadores")]),a._v(" "),s("p",[s("a",{pre:!0,attrs:{name:"defining-an-accessor"}})]),a._v(" "),s("h3",{pre:!0,attrs:{id:"definiendo-un-accesador"}},[s("a",{pre:!0,attrs:{class:"header-anchor",href:"#definiendo-un-accesador"}},[a._v("#")]),a._v(" Definiendo un accesador")]),a._v(" "),s("p",[a._v("Para definir un accesador crea un método "),s("code",[a._v("getFooAttribute")]),a._v(" en tu modelo, donde "),s("code",[a._v("Foo")]),a._v(" es el nombre de la columna que deseas acceder en el formato Studly Case (Primera letra de cada palabra en mayúscula). En este ejemplo, definiremos un accesador para el atributo "),s("code",[a._v("first_name")]),a._v(". El accesador automáticamente será ejecutado por Eloquent al momento de intentar obtener el valor del atributo "),s("code",[a._v("first_name")]),a._v(":")]),a._v(" "),s("div",{pre:!0,attrs:{class:"language-php extra-class"}},[s("pre",{pre:!0,attrs:{"v-pre":"",class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * Get the user's first name.\n    *\n    * @param  string  $value\n    * @return string\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFirstNameAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ucfirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("p",[a._v("Como puedes ver, el valor original de la columna es pasado al accesador, permitiéndote manipular y devolver el valor. Para acceder al valor del accesador, puedes acceder al atributo "),s("code",[a._v("first_name")]),a._v(" en una instancia del modelo:")]),a._v(" "),s("div",{pre:!0,attrs:{class:"language-php extra-class"}},[s("pre",{pre:!0,attrs:{"v-pre":"",class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$firstName")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("first_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("También puedes usar accesadores para retornar nuevos valores computados de atributos existentes:")]),a._v(" "),s("div",{pre:!0,attrs:{class:"language-php extra-class"}},[s("pre",{pre:!0,attrs:{"v-pre":"",class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n* Get the user's full name.\n*\n* @return string\n*/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFullNameAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("first_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("last_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")])]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{pre:!0,attrs:{class:"custom-block tip"}},[s("p",{pre:!0,attrs:{class:"custom-block-title"}},[a._v("TIP")]),a._v(" "),s("p",[a._v("Si deseas que estos valores computados sean agregados a las representaciones de arreglo / JSON de tu modelo, "),s("a",{pre:!0,attrs:{href:"https://laravel.com/docs/%7B%7Bversion%7D%7D/eloquent-serialization#appending-values-to-json",target:"_blank",rel:"noopener noreferrer"}},[a._v("necesitarás adjuntarlos"),s("OutboundLink",{pre:!0})],1),a._v(".")])])]),s("p",[s("a",{attrs:{name:"defining-a-mutator"}})]),a._v(" "),s("h3",{attrs:{id:"definiendo-un-mutador"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#definiendo-un-mutador"}},[a._v("#")]),a._v(" Definiendo un mutador")]),a._v(" "),s("p",[a._v("Para definir un mutador, define un método "),s("code",[a._v("setFooAttribute")]),a._v(" en tu modelo, donde "),s("code",[a._v("Foo")]),a._v(" es el nombre de la columna que deseas acceder en el formato Studly Case (Primera letra de cada palabra en mayúscula). Así, otra vez, vamos a definir un mutador para el atributo "),s("code",[a._v("first_name")]),a._v(". Este mutador será ejecutado automáticamente cuando intentamos establecer el valor del atributo "),s("code",[a._v("first_name")]),a._v(" en el modelo:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * Set the user's first name.\n    *\n    * @param  string  $value\n    * @return void\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setFirstNameAttribute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("attributes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'first_name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("strtolower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("p",[a._v("El mutador recibirá el valor que está siendo establecido en el atributo, permitiéndote manipular el valor y establecer el valor manipulado en la propiedad "),s("code",[a._v("$attributes")]),a._v(" interna del modelo Eloquent. Así, por ejemplo, si intentamos establecer el atributo "),s("code",[a._v("first_name")]),a._v(" como "),s("code",[a._v("Sally")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("first_name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'Sally'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("En este ejemplo, la función "),s("code",[a._v("setFirstNameAttribute")]),a._v(" será ejecutada con el valor "),s("code",[a._v("Sally")]),a._v(". El mutador entonces aplicará la función "),s("code",[a._v("strtolower")]),a._v(" al nombre y establecerá su valor resultante en el arreglo "),s("code",[a._v("$attributes")]),a._v(" interno.")]),a._v(" "),s("p",[s("a",{attrs:{name:"date-mutators"}})]),a._v(" "),s("h2",{attrs:{id:"mutadores-de-fecha"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutadores-de-fecha"}},[a._v("#")]),a._v(" Mutadores de fecha")]),a._v(" "),s("p",[a._v("De forma predeterminada, Eloquent convertirá las columnas "),s("code",[a._v("created_at")]),a._v(" y "),s("code",[a._v("updated_at")]),a._v(" a instancias de "),s("a",{attrs:{href:"https://github.com/briannesbitt/Carbon",target:"_blank",rel:"noopener noreferrer"}},[a._v("Carbon"),s("OutboundLink")],1),a._v(", la cual extiende la clase "),s("code",[a._v("DateTime")]),a._v(" de PHP para proporcionar una variedad de métodos útiles.  Puedes agregar atributos de fecha adicionales estableciendo la propiedad "),s("code",[a._v("$dates")]),a._v(" de tu modelo.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * The attributes that should be mutated to dates.\n    *\n    * @var array\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$dates")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'seen_at'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("Puedes desactivar las marcas de tiempo (timestamps) predeterminadas "),s("code",[a._v("created_at")]),a._v(" y"),s("code",[a._v("updated_at")]),a._v(" configurando la propiedad pública "),s("code",[a._v("$timestamps")]),a._v(" de tu modelo en "),s("code",[a._v("false")]),a._v(".")])]),a._v(" "),s("p",[a._v("Cuando una columna es considerada una fecha, puedes establecer su valor a una marca de tiempo UNIX, cadena de fecha ("),s("code",[a._v("Y-m-d")]),a._v("), cadena fecha-hora o una instancia "),s("code",[a._v("DateTime")]),a._v(" / "),s("code",[a._v("Carbon")]),a._v(". El valor de la fecha será convertido y almacenado correctamente en tu base de datos:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("deleted_at")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("Como se apreció anteriormente, al momento de obtener atributos que están listados en tu propiedad "),s("code",[a._v("$dates")]),a._v(", éstos serán automáticamente convertidos a instancias "),s("a",{attrs:{href:"https://github.com/briannesbitt/Carbon",target:"_blank",rel:"noopener noreferrer"}},[a._v("Carbon"),s("OutboundLink")],1),a._v(", permitiendo que uses cualquiera de los métodos de Carbon en tus atributos:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("deleted_at")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getTimestamp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"formatos-de-fecha"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#formatos-de-fecha"}},[a._v("#")]),a._v(" Formatos de fecha")]),a._v(" "),s("p",[a._v("De forma predeterminada, las marcas de tiempo son formateadas como "),s("code",[a._v("'Y-m-d H:i:s'")]),a._v(". Si necesitas personalizar el formato de marca de tiempo, establece la propiedad "),s("code",[a._v("$dateFormat")]),a._v(" en tu modelo. Esta propiedad determina como los atributos de fecha son almacenados en la base de datos así como también su formato cuando el modelo es serializado a un arreglo o JSON:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Flight")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * The storage format of the model's date columns.\n    *\n    * @var string\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$dateFormat")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'U'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("p",[s("a",{attrs:{name:"attribute-casting"}})]),a._v(" "),s("h2",{attrs:{id:"conversion-casting-de-atributos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversion-casting-de-atributos"}},[a._v("#")]),a._v(" Conversión (casting) de atributos")]),a._v(" "),s("p",[a._v("La propiedad "),s("code",[a._v("$casts")]),a._v(" en tu modelo proporciona un método conveniente de convertir atributos a tipos de datos comunes. La propiedad "),s("code",[a._v("$casts")]),a._v(" debería ser un arreglo donde la clave es el nombre del atributo que está siendo convertido y el valor es el tipo al que deseas convertir la columna. Los tipos de conversión soportados son: "),s("code",[a._v("integer")]),a._v(", "),s("code",[a._v("real")]),a._v(", "),s("code",[a._v("float")]),a._v(", "),s("code",[a._v("double")]),a._v(", "),s("code",[a._v("decimal:<digits>")]),a._v(", "),s("code",[a._v("string")]),a._v(", "),s("code",[a._v("boolean")]),a._v(", "),s("code",[a._v("object")]),a._v(", "),s("code",[a._v("array")]),a._v(", "),s("code",[a._v("collection")]),a._v(", "),s("code",[a._v("date")]),a._v(", "),s("code",[a._v("datetime")]),a._v(", and "),s("code",[a._v("timestamp")]),a._v(". Al convertir en "),s("code",[a._v("decimal")]),a._v(", debes definir el número de digitos ("),s("code",[a._v("decimal:2")]),a._v(").")]),a._v(" "),s("p",[a._v("Para demostrar la conversión de atributos, vamos a convertir el atributo "),s("code",[a._v("is_admin")]),a._v(", el cual es almacenado en nuestra base de datos como un entero ("),s("code",[a._v("0")]),a._v(" o "),s("code",[a._v("1")]),a._v(") a un valor booleano:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * The attributes that should be cast to native types.\n    *\n    * @var array\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$casts")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'is_admin'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'boolean'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("p",[a._v("Ahora el atributo "),s("code",[a._v("is_admin")]),a._v(" será siempre convertido a un booleano cuando lo accedas, incluso si el valor subyacente es almacenado en la base de datos como un entero:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("is_admin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("a",{attrs:{name:"array-and-json-casting"}})]),a._v(" "),s("h3",{attrs:{id:"conversion-de-arreglos-y-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversion-de-arreglos-y-json"}},[a._v("#")]),a._v(" Conversión de arreglos y JSON")]),a._v(" "),s("p",[a._v("El tipo de conversión "),s("code",[a._v("array")]),a._v(" es particularmente útil al momento de trabajar con columnas que son almacenadas como JSON serializado. Por ejemplo, si tu base de datos tiene un tipo de campo "),s("code",[a._v("JSON")]),a._v(" o "),s("code",[a._v("TEXT")]),a._v(" que contiene JSON serializado, agregar la conversión "),s("code",[a._v("array")]),a._v(" a ese atributo deserializará automáticamente el atributo a un arreglo PHP cuando lo accedas en tu modelo Eloquent:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("Illuminate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Eloquent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Model")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Model")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n    * The attributes that should be cast to native types.\n    *\n    * @var array\n    */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$casts")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'options'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'array'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])]),s("p",[a._v("Una vez que la conversión es definida, puedes acceder al atributo "),s("code",[a._v("options")]),a._v(" y será automáticamente deserializado desde JSON a un arreglo PHP. Cuando establezcas el valor del atributo "),s("code",[a._v("options")]),a._v(", el arreglo dado será automáticamente serializado de vuelta en JSON para almacenamiento:")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" App\\"),s("span",{pre:!0,attrs:{class:"token package"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$options")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token property"}},[a._v("options")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$options")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$user")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("save")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("a",{attrs:{name:"date-casting"}})]),a._v(" "),s("h3",{attrs:{id:"conversion-de-fechas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversion-de-fechas"}},[a._v("#")]),a._v(" Conversión de fechas")]),a._v(" "),s("p",[a._v("Al usar el tipo de conversión "),s("code",[a._v("date")]),a._v(" o"),s("code",[a._v("datetime")]),a._v(", puedes especificar el formato de la fecha. Este formato se utilizará cuando el "),s("router-link",{attrs:{to:"/eloquent-serialization.html"}},[a._v("modelo se serializa a un arreglo o JSON")]),a._v(":")],1),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n* The attributes that should be cast to native types.\n*\n* @var array\n*/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$casts")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'created_at'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'datetime:Y-m-d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);